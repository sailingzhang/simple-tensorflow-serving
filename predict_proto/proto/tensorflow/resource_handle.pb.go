// Code generated by protoc-gen-go. DO NOT EDIT.
// source: resource_handle.proto

package tensorflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Protocol buffer representing a handle to a tensorflow resource. Handles are
// not valid across executions, but can be serialized back and forth from within
// a single run.
type ResourceHandleProto struct {
	// Unique name for the device containing the resource.
	Device string `protobuf:"bytes,1,opt,name=device" json:"device"`
	// Container in which this resource is placed.
	Container string `protobuf:"bytes,2,opt,name=container" json:"container"`
	// Unique name of this resource.
	Name string `protobuf:"bytes,3,opt,name=name" json:"name"`
	// Hash code for the type of the resource. Is only valid in the same device
	// and in the same execution.
	HashCode uint64 `protobuf:"varint,4,opt,name=hash_code,json=hashCode" json:"hash_code"`
	// For debug-only, the name of the type pointed to by this handle, if
	// available.
	MaybeTypeName string `protobuf:"bytes,5,opt,name=maybe_type_name,json=maybeTypeName" json:"maybe_type_name"`
	// Data types and shapes for the underlying resource.
	DtypesAndShapes []*ResourceHandleProto_DtypeAndShape `protobuf:"bytes,6,rep,name=dtypes_and_shapes,json=dtypesAndShapes" json:"dtypes_and_shapes"`
}

func (m *ResourceHandleProto) Reset()                    { *m = ResourceHandleProto{} }
func (m *ResourceHandleProto) String() string            { return proto.CompactTextString(m) }
func (*ResourceHandleProto) ProtoMessage()               {}
func (*ResourceHandleProto) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *ResourceHandleProto) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *ResourceHandleProto) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *ResourceHandleProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResourceHandleProto) GetHashCode() uint64 {
	if m != nil {
		return m.HashCode
	}
	return 0
}

func (m *ResourceHandleProto) GetMaybeTypeName() string {
	if m != nil {
		return m.MaybeTypeName
	}
	return ""
}

func (m *ResourceHandleProto) GetDtypesAndShapes() []*ResourceHandleProto_DtypeAndShape {
	if m != nil {
		return m.DtypesAndShapes
	}
	return nil
}

// Protocol buffer representing a pair of (data type, tensor shape).
type ResourceHandleProto_DtypeAndShape struct {
	Dtype DataType          `protobuf:"varint,1,opt,name=dtype,enum=tensorflow.DataType" json:"dtype"`
	Shape *TensorShapeProto `protobuf:"bytes,2,opt,name=shape" json:"shape"`
}

func (m *ResourceHandleProto_DtypeAndShape) Reset()         { *m = ResourceHandleProto_DtypeAndShape{} }
func (m *ResourceHandleProto_DtypeAndShape) String() string { return proto.CompactTextString(m) }
func (*ResourceHandleProto_DtypeAndShape) ProtoMessage()    {}
func (*ResourceHandleProto_DtypeAndShape) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{0, 0}
}

func (m *ResourceHandleProto_DtypeAndShape) GetDtype() DataType {
	if m != nil {
		return m.Dtype
	}
	return DataType_DT_INVALID
}

func (m *ResourceHandleProto_DtypeAndShape) GetShape() *TensorShapeProto {
	if m != nil {
		return m.Shape
	}
	return nil
}

func init() {
	proto.RegisterType((*ResourceHandleProto)(nil), "tensorflow.ResourceHandleProto")
	proto.RegisterType((*ResourceHandleProto_DtypeAndShape)(nil), "tensorflow.ResourceHandleProto.DtypeAndShape")
}

func init() { proto.RegisterFile("resource_handle.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0x4d, 0x4f, 0x02, 0x31,
	0x10, 0xcd, 0xf2, 0x15, 0x19, 0x02, 0x68, 0xfd, 0xc8, 0x06, 0x39, 0x10, 0x0f, 0x86, 0x98, 0xb8,
	0x26, 0xeb, 0x2f, 0x00, 0x39, 0x78, 0x32, 0xa6, 0x72, 0xd1, 0x4b, 0x53, 0xb6, 0x83, 0x4b, 0x84,
	0x76, 0xd3, 0xae, 0x12, 0xfe, 0xb5, 0x47, 0x8f, 0xa6, 0x53, 0x0c, 0x68, 0xbc, 0xcd, 0xbc, 0x79,
	0xef, 0xe5, 0xbd, 0x16, 0x4e, 0x2d, 0x3a, 0xf3, 0x6e, 0x33, 0x14, 0xb9, 0xd4, 0x6a, 0x89, 0x49,
	0x61, 0x4d, 0x69, 0x18, 0x94, 0xa8, 0x9d, 0xb1, 0xf3, 0xa5, 0x59, 0xf7, 0x58, 0x98, 0x85, 0xcb,
	0x65, 0xb1, 0xbd, 0xf7, 0x5a, 0xe5, 0xa6, 0x40, 0x17, 0x96, 0x8b, 0xcf, 0x0a, 0x1c, 0xf3, 0xad,
	0xcd, 0x3d, 0xb9, 0x3c, 0x92, 0xc9, 0x19, 0x34, 0x14, 0x7e, 0x2c, 0x32, 0x8c, 0xa3, 0x41, 0x34,
	0x6c, 0xf2, 0xed, 0xc6, 0xfa, 0xd0, 0xcc, 0x8c, 0x2e, 0xe5, 0x42, 0xa3, 0x8d, 0x2b, 0x74, 0xda,
	0x01, 0x8c, 0x41, 0x4d, 0xcb, 0x15, 0xc6, 0x55, 0x3a, 0xd0, 0xcc, 0xce, 0xa1, 0x99, 0x4b, 0x97,
	0x8b, 0xcc, 0x28, 0x8c, 0x6b, 0x83, 0x68, 0x58, 0xe3, 0x07, 0x1e, 0xb8, 0x33, 0x0a, 0xd9, 0x25,
	0x74, 0x57, 0x72, 0x33, 0x43, 0xe1, 0x33, 0x09, 0xd2, 0xd6, 0x49, 0xdb, 0x26, 0x78, 0xba, 0x29,
	0xf0, 0xc1, 0x9b, 0x3c, 0xc3, 0x91, 0xa2, 0xd8, 0x42, 0x6a, 0x15, 0xda, 0xb8, 0xb8, 0x31, 0xa8,
	0x0e, 0x5b, 0xe9, 0x75, 0xb2, 0xeb, 0x9b, 0xfc, 0x53, 0x25, 0x99, 0x78, 0xe1, 0x48, 0xab, 0x27,
	0xaf, 0xe2, 0xdd, 0xe0, 0xf3, 0xb3, 0xbb, 0x9e, 0x81, 0xf6, 0x2f, 0x06, 0xbb, 0x82, 0x3a, 0x71,
	0xa8, 0x79, 0x27, 0x3d, 0xd9, 0xf7, 0x9f, 0xc8, 0x52, 0xfa, 0x50, 0x3c, 0x50, 0x58, 0x0a, 0x75,
	0x0a, 0x43, 0x4f, 0xd1, 0x4a, 0xfb, 0xfb, 0xdc, 0x29, 0x8d, 0xe4, 0x49, 0x41, 0x78, 0xa0, 0x8e,
	0x47, 0x10, 0x1b, 0xfb, 0xba, 0xcf, 0x9c, 0x5b, 0xb9, 0xc2, 0xb5, 0xb1, 0x6f, 0xe3, 0xce, 0x9f,
	0x02, 0xd1, 0xcb, 0x21, 0xfd, 0xd3, 0xcd, 0x8e, 0xfd, 0x15, 0x45, 0xb3, 0x06, 0x81, 0xb7, 0xdf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x49, 0x36, 0x3b, 0x46, 0x02, 0x02, 0x00, 0x00,
}

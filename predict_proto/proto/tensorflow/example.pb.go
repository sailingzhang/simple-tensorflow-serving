// Code generated by protoc-gen-go. DO NOT EDIT.
// source: example.proto

package tensorflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Example struct {
	Features *Features `protobuf:"bytes,1,opt,name=features" json:"features"`
}

func (m *Example) Reset()                    { *m = Example{} }
func (m *Example) String() string            { return proto.CompactTextString(m) }
func (*Example) ProtoMessage()               {}
func (*Example) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Example) GetFeatures() *Features {
	if m != nil {
		return m.Features
	}
	return nil
}

type SequenceExample struct {
	Context      *Features     `protobuf:"bytes,1,opt,name=context" json:"context"`
	FeatureLists *FeatureLists `protobuf:"bytes,2,opt,name=feature_lists,json=featureLists" json:"feature_lists"`
}

func (m *SequenceExample) Reset()                    { *m = SequenceExample{} }
func (m *SequenceExample) String() string            { return proto.CompactTextString(m) }
func (*SequenceExample) ProtoMessage()               {}
func (*SequenceExample) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *SequenceExample) GetContext() *Features {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *SequenceExample) GetFeatureLists() *FeatureLists {
	if m != nil {
		return m.FeatureLists
	}
	return nil
}

func init() {
	proto.RegisterType((*Example)(nil), "tensorflow.Example")
	proto.RegisterType((*SequenceExample)(nil), "tensorflow.SequenceExample")
}

func init() { proto.RegisterFile("example.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xad, 0x48, 0xcc,
	0x2d, 0xc8, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2a, 0x49, 0xcd, 0x2b, 0xce,
	0x2f, 0x4a, 0xcb, 0xc9, 0x2f, 0x97, 0xe2, 0x4d, 0x4b, 0x4d, 0x2c, 0x29, 0x2d, 0x82, 0x4a, 0x29,
	0x59, 0x73, 0xb1, 0xbb, 0x42, 0xd4, 0x0a, 0x19, 0x70, 0x71, 0x40, 0xe5, 0x8a, 0x25, 0x18, 0x15,
	0x18, 0x35, 0xb8, 0x8d, 0x44, 0xf4, 0x10, 0x1a, 0xf5, 0xdc, 0xa0, 0x72, 0x41, 0x70, 0x55, 0x4a,
	0x0d, 0x8c, 0x5c, 0xfc, 0xc1, 0xa9, 0x85, 0xa5, 0xa9, 0x79, 0xc9, 0xa9, 0x30, 0x53, 0xf4, 0xb8,
	0xd8, 0x93, 0xf3, 0xf3, 0x4a, 0x52, 0x2b, 0x4a, 0xf0, 0x1a, 0x02, 0x53, 0x24, 0x64, 0xcb, 0x05,
	0x73, 0x51, 0x7c, 0x4e, 0x66, 0x71, 0x49, 0xb1, 0x04, 0x13, 0x58, 0x97, 0x04, 0x16, 0x5d, 0x3e,
	0x20, 0xf9, 0x20, 0x9e, 0x34, 0x24, 0x9e, 0x93, 0x1d, 0x97, 0x58, 0x7e, 0x51, 0x3a, 0xb2, 0x62,
	0xa8, 0xd7, 0x9d, 0x78, 0xa1, 0x2e, 0x0a, 0x00, 0xf9, 0xb3, 0x38, 0x80, 0x31, 0x4a, 0x00, 0xec,
	0x63, 0x7d, 0x84, 0xd2, 0x1f, 0x8c, 0x8c, 0x49, 0x6c, 0x60, 0x41, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x24, 0x1f, 0x52, 0x26, 0x32, 0x01, 0x00, 0x00,
}

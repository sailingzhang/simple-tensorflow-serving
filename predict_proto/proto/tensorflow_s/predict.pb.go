// Code generated by protoc-gen-go. DO NOT EDIT.
// source: predict.proto

package tensorflow_s

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// PredictRequest specifies which TensorFlow model to run, as well as
// how inputs are mapped to tensors and how outputs are filtered before
// returning to user.
type PredictRequest struct {
	// Model Specification. If version is not specified, will use the latest
	// (numerical) version.
	ModelSpec *ModelSpec `protobuf:"bytes,1,opt,name=model_spec,json=modelSpec" json:"model_spec"`
	// Input tensors.
	// Names of input tensor are alias names. The mapping from aliases to real
	// input tensor names is stored in the SavedModel export as a prediction
	// SignatureDef under the 'inputs' field.
	Inputs map[string]*TensorProto `protobuf:"bytes,2,rep,name=inputs" json:"inputs" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Output filter.
	// Names specified are alias names. The mapping from aliases to real output
	// tensor names is stored in the SavedModel export as a prediction
	// SignatureDef under the 'outputs' field.
	// Only tensors specified here will be run/fetched and returned, with the
	// exception that when none is specified, all tensors specified in the
	// named signature will be run/fetched and returned.
	OutputFilter []string `protobuf:"bytes,3,rep,name=output_filter,json=outputFilter" json:"output_filter"`
}

func (m *PredictRequest) Reset()                    { *m = PredictRequest{} }
func (m *PredictRequest) String() string            { return proto.CompactTextString(m) }
func (*PredictRequest) ProtoMessage()               {}
func (*PredictRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *PredictRequest) GetModelSpec() *ModelSpec {
	if m != nil {
		return m.ModelSpec
	}
	return nil
}

func (m *PredictRequest) GetInputs() map[string]*TensorProto {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *PredictRequest) GetOutputFilter() []string {
	if m != nil {
		return m.OutputFilter
	}
	return nil
}

// Response for PredictRequest on successful run.
type PredictResponse struct {
	// Effective Model Specification used to process PredictRequest.
	ModelSpec *ModelSpec `protobuf:"bytes,2,opt,name=model_spec,json=modelSpec" json:"model_spec"`
	// Output tensors.
	Outputs map[string]*TensorProto `protobuf:"bytes,1,rep,name=outputs" json:"outputs" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PredictResponse) Reset()                    { *m = PredictResponse{} }
func (m *PredictResponse) String() string            { return proto.CompactTextString(m) }
func (*PredictResponse) ProtoMessage()               {}
func (*PredictResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *PredictResponse) GetModelSpec() *ModelSpec {
	if m != nil {
		return m.ModelSpec
	}
	return nil
}

func (m *PredictResponse) GetOutputs() map[string]*TensorProto {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func init() {
	proto.RegisterType((*PredictRequest)(nil), "tensorflow_s.serving.PredictRequest")
	proto.RegisterType((*PredictResponse)(nil), "tensorflow_s.serving.PredictResponse")
}

func init() { proto.RegisterFile("predict.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x65, 0x13, 0xac, 0x74, 0xd2, 0xaa, 0x2c, 0x82, 0x31, 0x17, 0x4b, 0xbd, 0xe4, 0xb4, 0x95,
	0x78, 0x11, 0x0f, 0x1e, 0x04, 0x45, 0x41, 0xb1, 0xac, 0xf5, 0xe2, 0x25, 0x68, 0x3a, 0x95, 0x60,
	0x9a, 0x5d, 0x77, 0x37, 0x95, 0x7e, 0x88, 0xbf, 0x2a, 0x1e, 0x25, 0xbb, 0x56, 0x52, 0x29, 0x88,
	0xe0, 0x6d, 0xe6, 0xed, 0x7b, 0x33, 0x6f, 0x1e, 0x0b, 0x5d, 0xa9, 0x70, 0x9c, 0x67, 0x86, 0x49,
	0x25, 0x8c, 0xa0, 0xdb, 0x06, 0x4b, 0x2d, 0xd4, 0xa4, 0x10, 0xaf, 0xa9, 0x66, 0x1a, 0xd5, 0x2c,
	0x2f, 0x9f, 0xa2, 0x8e, 0x43, 0x1d, 0x27, 0x0a, 0xa6, 0x62, 0x8c, 0x85, 0x6b, 0xfa, 0x6f, 0x1e,
	0x6c, 0x0c, 0xdd, 0x08, 0x8e, 0x2f, 0x15, 0x6a, 0x43, 0x4f, 0x00, 0x2c, 0x23, 0xd5, 0x12, 0xb3,
	0x90, 0xf4, 0x48, 0x1c, 0x24, 0x7b, 0x6c, 0xd5, 0x60, 0x76, 0x5d, 0xf3, 0x6e, 0x25, 0x66, 0xbc,
	0x3d, 0x5d, 0x94, 0xf4, 0x02, 0x5a, 0x79, 0x29, 0x2b, 0xa3, 0x43, 0xaf, 0xe7, 0xc7, 0x41, 0x72,
	0xb0, 0x5a, 0xbb, 0xbc, 0x95, 0x5d, 0x5a, 0xc9, 0x59, 0x69, 0xd4, 0x9c, 0x7f, 0xe9, 0xe9, 0x3e,
	0x74, 0x45, 0x65, 0x64, 0x65, 0xd2, 0x49, 0x5e, 0x18, 0x54, 0xa1, 0xdf, 0xf3, 0xe3, 0x36, 0xef,
	0x38, 0xf0, 0xdc, 0x62, 0xd1, 0x08, 0x82, 0x86, 0x96, 0x6e, 0x81, 0xff, 0x8c, 0x73, 0x6b, 0xbb,
	0xcd, 0xeb, 0x92, 0x0e, 0x60, 0x6d, 0xf6, 0x50, 0x54, 0x18, 0x7a, 0xf6, 0x94, 0xdd, 0x65, 0x3b,
	0x23, 0xdb, 0x0c, 0xeb, 0x30, 0xb8, 0xe3, 0x1d, 0x7b, 0x47, 0xa4, 0xff, 0x4e, 0x60, 0xf3, 0xdb,
	0xa1, 0x96, 0xa2, 0xd4, 0xf8, 0x23, 0x18, 0xef, 0xcf, 0xc1, 0x5c, 0xc1, 0xba, 0x73, 0xae, 0x43,
	0x62, 0x93, 0x49, 0x7e, 0x49, 0xc6, 0xed, 0x65, 0x37, 0x4e, 0xe4, 0xb2, 0x59, 0x8c, 0x88, 0xee,
	0xa0, 0xd3, 0x7c, 0xf8, 0xa7, 0xc3, 0x4f, 0x77, 0xee, 0xa9, 0xfd, 0x19, 0x83, 0x26, 0xf9, 0x83,
	0x90, 0xc7, 0x96, 0x85, 0x0f, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x52, 0x96, 0x51, 0x57, 0x72,
	0x02, 0x00, 0x00,
}

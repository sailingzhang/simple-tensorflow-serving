// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model.proto

package tensorflow_s

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Metadata for an inference request such as the model name and version.
type ModelSpec struct {
	// Required servable name.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name"`
	// Optional choice of which version of the model to use.
	//
	// Recommended to be left unset in the common case. Should be specified only
	// when there is a strong version consistency requirement.
	//
	// When left unspecified, the system will serve the best available version.
	// This is typically the latest version, though during version transitions,
	// notably when serving on a fleet of instances, may be either the previous or
	// new version.
	//
	// Types that are valid to be assigned to VersionChoice:
	//	*ModelSpec_VersionLabel
	VersionChoice isModelSpec_VersionChoice `protobuf_oneof:"version_choice"`
	// A named signature to evaluate. If unspecified, the default signature will
	// be used.
	SignatureName string `protobuf:"bytes,3,opt,name=signature_name,json=signatureName" json:"signature_name"`
}

func (m *ModelSpec) Reset()                    { *m = ModelSpec{} }
func (m *ModelSpec) String() string            { return proto.CompactTextString(m) }
func (*ModelSpec) ProtoMessage()               {}
func (*ModelSpec) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

type isModelSpec_VersionChoice interface {
	isModelSpec_VersionChoice()
}

type ModelSpec_VersionLabel struct {
	VersionLabel string `protobuf:"bytes,4,opt,name=version_label,json=versionLabel,oneof"`
}

func (*ModelSpec_VersionLabel) isModelSpec_VersionChoice() {}

func (m *ModelSpec) GetVersionChoice() isModelSpec_VersionChoice {
	if m != nil {
		return m.VersionChoice
	}
	return nil
}

func (m *ModelSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ModelSpec) GetVersionLabel() string {
	if x, ok := m.GetVersionChoice().(*ModelSpec_VersionLabel); ok {
		return x.VersionLabel
	}
	return ""
}

func (m *ModelSpec) GetSignatureName() string {
	if m != nil {
		return m.SignatureName
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ModelSpec) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ModelSpec_OneofMarshaler, _ModelSpec_OneofUnmarshaler, _ModelSpec_OneofSizer, []interface{}{
		(*ModelSpec_VersionLabel)(nil),
	}
}

func _ModelSpec_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ModelSpec)
	// version_choice
	switch x := m.VersionChoice.(type) {
	case *ModelSpec_VersionLabel:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.VersionLabel)
	case nil:
	default:
		return fmt.Errorf("ModelSpec.VersionChoice has unexpected type %T", x)
	}
	return nil
}

func _ModelSpec_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ModelSpec)
	switch tag {
	case 4: // version_choice.version_label
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.VersionChoice = &ModelSpec_VersionLabel{x}
		return true, err
	default:
		return false, nil
	}
}

func _ModelSpec_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ModelSpec)
	// version_choice
	switch x := m.VersionChoice.(type) {
	case *ModelSpec_VersionLabel:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.VersionLabel)))
		n += len(x.VersionLabel)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*ModelSpec)(nil), "tensorflow_s.serving.ModelSpec")
}

func init() { proto.RegisterFile("model.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0xcd, 0x4f, 0x49,
	0xcd, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x29, 0x49, 0xcd, 0x2b, 0xce, 0x2f, 0x4a,
	0xcb, 0xc9, 0x2f, 0x8f, 0x2f, 0xd6, 0x2b, 0x4e, 0x2d, 0x2a, 0xcb, 0xcc, 0x4b, 0x57, 0xaa, 0xe7,
	0xe2, 0xf4, 0x05, 0x29, 0x0a, 0x2e, 0x48, 0x4d, 0x16, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d,
	0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x85, 0x54, 0xb9, 0x78, 0xcb, 0x52, 0x8b,
	0x8a, 0x33, 0xf3, 0xf3, 0xe2, 0x73, 0x12, 0x93, 0x52, 0x73, 0x24, 0x58, 0x40, 0x92, 0x1e, 0x0c,
	0x41, 0x3c, 0x50, 0x61, 0x1f, 0x90, 0xa8, 0x90, 0x2a, 0x17, 0x5f, 0x71, 0x66, 0x7a, 0x5e, 0x62,
	0x49, 0x69, 0x51, 0x6a, 0x3c, 0xd8, 0x10, 0x66, 0xb0, 0x21, 0xbc, 0x70, 0x51, 0xbf, 0xc4, 0xdc,
	0x54, 0x27, 0x01, 0x2e, 0x3e, 0x98, 0x69, 0xc9, 0x19, 0xf9, 0x99, 0xc9, 0xa9, 0x4e, 0xe2, 0x51,
	0x42, 0x60, 0xf7, 0xe9, 0x23, 0x3b, 0xef, 0x07, 0x23, 0x63, 0x12, 0x1b, 0x58, 0xd8, 0x18, 0x10,
	0x00, 0x00, 0xff, 0xff, 0xde, 0x8b, 0xbe, 0x64, 0xc5, 0x00, 0x00, 0x00,
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: input.proto

package tensorflow_s

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Specifies one or more fully independent input Examples.
// See examples at:
//     https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/example/example.proto
type ExampleList struct {
	Examples []*Example `protobuf:"bytes,1,rep,name=examples" json:"examples"`
}

func (m *ExampleList) Reset()                    { *m = ExampleList{} }
func (m *ExampleList) String() string            { return proto.CompactTextString(m) }
func (*ExampleList) ProtoMessage()               {}
func (*ExampleList) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *ExampleList) GetExamples() []*Example {
	if m != nil {
		return m.Examples
	}
	return nil
}

// Specifies one or more independent input Examples, with a common context
// Example.
//
// The common use case for context is to cleanly and optimally specify some
// features that are common across multiple examples.
//
// See example below with a search query as the context and multiple restaurants
// to perform some inference on.
//
// context: {
//   features: {
//     feature: {
//       key  : "query"
//       value: {
//         bytes_list: {
//           value: [ "pizza" ]
//         }
//       }
//     }
//   }
// }
// examples: {
//   features: {
//     feature: {
//       key  : "cuisine"
//       value: {
//         bytes_list: {
//           value: [ "Pizzeria" ]
//         }
//       }
//     }
//   }
// }
// examples: {
//   features: {
//     feature: {
//       key  : "cuisine"
//       value: {
//         bytes_list: {
//           value: [ "Taqueria" ]
//         }
//       }
//     }
//   }
// }
//
// Implementations of ExampleListWithContext merge the context Example into each
// of the Examples. Note that feature keys must not be duplicated between the
// Examples and context Example, or the behavior is undefined.
//
// See also:
//     tensorflow/core/example/example.proto
//     https://developers.google.com/protocol-buffers/docs/proto3#maps
type ExampleListWithContext struct {
	Examples []*Example `protobuf:"bytes,1,rep,name=examples" json:"examples"`
	Context  *Example   `protobuf:"bytes,2,opt,name=context" json:"context"`
}

func (m *ExampleListWithContext) Reset()                    { *m = ExampleListWithContext{} }
func (m *ExampleListWithContext) String() string            { return proto.CompactTextString(m) }
func (*ExampleListWithContext) ProtoMessage()               {}
func (*ExampleListWithContext) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *ExampleListWithContext) GetExamples() []*Example {
	if m != nil {
		return m.Examples
	}
	return nil
}

func (m *ExampleListWithContext) GetContext() *Example {
	if m != nil {
		return m.Context
	}
	return nil
}

type Input struct {
	// Types that are valid to be assigned to Kind:
	//	*Input_ExampleList
	//	*Input_ExampleListWithContext
	Kind isInput_Kind `protobuf_oneof:"kind"`
}

func (m *Input) Reset()                    { *m = Input{} }
func (m *Input) String() string            { return proto.CompactTextString(m) }
func (*Input) ProtoMessage()               {}
func (*Input) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

type isInput_Kind interface {
	isInput_Kind()
}

type Input_ExampleList struct {
	ExampleList *ExampleList `protobuf:"bytes,1,opt,name=example_list,json=exampleList,oneof"`
}
type Input_ExampleListWithContext struct {
	ExampleListWithContext *ExampleListWithContext `protobuf:"bytes,2,opt,name=example_list_with_context,json=exampleListWithContext,oneof"`
}

func (*Input_ExampleList) isInput_Kind()            {}
func (*Input_ExampleListWithContext) isInput_Kind() {}

func (m *Input) GetKind() isInput_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *Input) GetExampleList() *ExampleList {
	if x, ok := m.GetKind().(*Input_ExampleList); ok {
		return x.ExampleList
	}
	return nil
}

func (m *Input) GetExampleListWithContext() *ExampleListWithContext {
	if x, ok := m.GetKind().(*Input_ExampleListWithContext); ok {
		return x.ExampleListWithContext
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Input) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Input_OneofMarshaler, _Input_OneofUnmarshaler, _Input_OneofSizer, []interface{}{
		(*Input_ExampleList)(nil),
		(*Input_ExampleListWithContext)(nil),
	}
}

func _Input_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Input)
	// kind
	switch x := m.Kind.(type) {
	case *Input_ExampleList:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExampleList); err != nil {
			return err
		}
	case *Input_ExampleListWithContext:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExampleListWithContext); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Input.Kind has unexpected type %T", x)
	}
	return nil
}

func _Input_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Input)
	switch tag {
	case 1: // kind.example_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExampleList)
		err := b.DecodeMessage(msg)
		m.Kind = &Input_ExampleList{msg}
		return true, err
	case 2: // kind.example_list_with_context
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExampleListWithContext)
		err := b.DecodeMessage(msg)
		m.Kind = &Input_ExampleListWithContext{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Input_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Input)
	// kind
	switch x := m.Kind.(type) {
	case *Input_ExampleList:
		s := proto.Size(x.ExampleList)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Input_ExampleListWithContext:
		s := proto.Size(x.ExampleListWithContext)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*ExampleList)(nil), "tensorflow_s.serving.ExampleList")
	proto.RegisterType((*ExampleListWithContext)(nil), "tensorflow_s.serving.ExampleListWithContext")
	proto.RegisterType((*Input)(nil), "tensorflow_s.serving.Input")
}

func init() { proto.RegisterFile("input.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0xcc, 0x2b, 0x28,
	0x2d, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x29, 0x49, 0xcd, 0x2b, 0xce, 0x2f, 0x4a,
	0xcb, 0xc9, 0x2f, 0x8f, 0x2f, 0xd6, 0x2b, 0x4e, 0x2d, 0x2a, 0xcb, 0xcc, 0x4b, 0x97, 0xe2, 0x4d,
	0xad, 0x48, 0xcc, 0x2d, 0xc8, 0x49, 0x85, 0x28, 0x52, 0x72, 0xe0, 0xe2, 0x76, 0x85, 0x08, 0xf8,
	0x64, 0x16, 0x97, 0x08, 0x19, 0x72, 0x71, 0x40, 0xe5, 0x8b, 0x25, 0x18, 0x15, 0x98, 0x35, 0xb8,
	0x8d, 0x44, 0xf5, 0x50, 0x8c, 0x81, 0x2a, 0x0e, 0x82, 0x2b, 0x53, 0xaa, 0xe1, 0x12, 0x43, 0x32,
	0x21, 0x3c, 0xb3, 0x24, 0xc3, 0x39, 0x3f, 0xaf, 0x24, 0xb5, 0x82, 0x1c, 0xc3, 0x84, 0xf4, 0xb9,
	0xd8, 0x93, 0x21, 0xba, 0x25, 0x98, 0x14, 0x18, 0x71, 0xeb, 0x80, 0xa9, 0x52, 0x3a, 0xc5, 0xc8,
	0xc5, 0xea, 0x09, 0xf2, 0xb4, 0x90, 0x17, 0x17, 0x0f, 0xd4, 0x98, 0xf8, 0x9c, 0xcc, 0xe2, 0x12,
	0x09, 0x46, 0xb0, 0x7e, 0x45, 0x3d, 0x6c, 0xa1, 0xa0, 0x87, 0xe4, 0x62, 0x27, 0x26, 0x0d, 0x46,
	0x0f, 0x86, 0x20, 0xee, 0x54, 0xa4, 0x60, 0xc8, 0xe5, 0x92, 0x44, 0x36, 0x2b, 0xbe, 0x3c, 0xb3,
	0x24, 0x23, 0x1e, 0xd5, 0x61, 0x3a, 0x04, 0x0d, 0x46, 0x0a, 0x0a, 0xa8, 0x1d, 0x62, 0xa9, 0xd8,
	0x65, 0xd9, 0xb8, 0x58, 0xb2, 0x33, 0xf3, 0x52, 0x9c, 0xc4, 0xa3, 0x84, 0xc0, 0xb1, 0xa2, 0x8f,
	0x6c, 0xf4, 0x0f, 0x46, 0xc6, 0x24, 0x36, 0xb0, 0xb0, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x57,
	0x11, 0xb2, 0xc2, 0xe0, 0x01, 0x00, 0x00,
}
